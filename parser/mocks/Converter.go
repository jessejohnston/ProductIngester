// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import decimal "github.com/shopspring/decimal"
import mock "github.com/stretchr/testify/mock"

import product "github.com/jessejohnston/ProductIngester/product"

// Converter is an autogenerated mock type for the Converter type
type Converter struct {
	mock.Mock
}

// ToCurrency provides a mock function with given fields: text
func (_m *Converter) ToCurrency(text []byte) (decimal.Decimal, error) {
	ret := _m.Called(text)

	var r0 decimal.Decimal
	if rf, ok := ret.Get(0).(func([]byte) decimal.Decimal); ok {
		r0 = rf(text)
	} else {
		r0 = ret.Get(0).(decimal.Decimal)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToFlags provides a mock function with given fields: text
func (_m *Converter) ToFlags(text []byte) (product.Flags, error) {
	ret := _m.Called(text)

	var r0 product.Flags
	if rf, ok := ret.Get(0).(func([]byte) product.Flags); ok {
		r0 = rf(text)
	} else {
		r0 = ret.Get(0).(product.Flags)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToNumber provides a mock function with given fields: text
func (_m *Converter) ToNumber(text []byte) (int, error) {
	ret := _m.Called(text)

	var r0 int
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(text)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToString provides a mock function with given fields: text
func (_m *Converter) ToString(text []byte) string {
	ret := _m.Called(text)

	var r0 string
	if rf, ok := ret.Get(0).(func([]byte) string); ok {
		r0 = rf(text)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
